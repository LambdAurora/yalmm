CLASS net/minecraft/core/Registry
	COMMENT Represents a registry which is used to register various in-game components.
	COMMENT <p>
	COMMENT Almost all parts of the game - from blocks, items, and entity types, to cat types,
	COMMENT goat horn instruments, and structure pools - are registered in registries.
	COMMENT The registry system allows the game to enumerate all known types of something,
	COMMENT and to assign a unique identifier to each of those.
	COMMENT Therefore, registering an object in the registry plays a very important role,
	COMMENT and failure to register new instances of registerable object usually results in a bug or even a crash.
	COMMENT
	COMMENT <h2 id=\\"terms\\">Terminologies</h2>
	COMMENT <p>
	COMMENT A <strong>registry</strong> is an object that holds the mapping between three things:
	COMMENT the string identifier, the numeric identifier, and the registered value.
	COMMENT There are many registries for different types of registerable objects,
	COMMENT and a registry's type parameter indicates the accepted type.
	COMMENT For example, you register your {@link net.minecraft.world.level.block.Block} to {@code Registry<Block>}.
	COMMENT It's important to note that registries themselves are registered in a \\"registry of registries\\",
	COMMENT {@link net.minecraft.core.registries.BuiltInRegistries#REGISTRIES}.
	COMMENT <p>
	COMMENT The <strong>string identifier</strong>, usually just called \\"ID\\" or \\"identifier\\",
	COMMENT is a human-readable {@link Identifier} that uniquely identifies the registered value in a registry.
	COMMENT This should stay the same between two game versions, and is usually used for disk storage.
	COMMENT <p>
	COMMENT The <strong>numeric identifier</strong> or <strong>raw identifier</strong>
	COMMENT is an integer assigned automatically by the registry to each registered value.
	COMMENT This is not guaranteed to stay the same between two game versions, and is usually used for networking purposes.
	COMMENT <p>
	COMMENT The <strong>registered value</strong>, often just called \\"value\\" in the code, is the value added to the registry.
	COMMENT The registry's type parameter determines the type of the registered value.
	COMMENT <p>
	COMMENT Each registered value can also be identified with a <strong>{@linkplain ResourceKey resource key}</strong>.
	COMMENT A resource key is a combination of the registry's identifier and the registered value's identifier.
	COMMENT Using a registry key makes the type of the identifier's associated value clear, as the type parameter contains the type.
	COMMENT <p>
	COMMENT An <strong>{@linkplain Holder holder}</strong> is an object holding a value that can be registered in a registry.
	COMMENT In most cases, the value is already registered in a registry (\\"reference entry\\"), hence the name;
	COMMENT however, it is possible to create an holder by direct reference (\\"direct entry\\").
	COMMENT This is useful for data packs, as they can define one-time use values directly without having to register them every time.
	METHOD containsKey containsKey (Lnet/minecraft/resources/ResourceKey;)Z
		ARG 1 key
	METHOD containsKey containsId (Lnet/minecraft/resources/ResourceLocation;)Z
		ARG 1 id
	METHOD createIntrusiveHolder (Ljava/lang/Object;)Lnet/minecraft/core/Holder$Reference;
		ARG 1 value
	METHOD entrySet entrySet ()Ljava/util/Set;
	METHOD get get (Lnet/minecraft/resources/ResourceKey;)Ljava/lang/Object;
		COMMENT {@return the value that is assigned to {@code key}, or {@code null} if there is none}
		ARG 1 key
			COMMENT the resource key of the value
	METHOD get get (Lnet/minecraft/resources/ResourceLocation;)Ljava/lang/Object;
		COMMENT {@return the value that is assigned to {@code id}, or {@code null} if there is none}
		ARG 1 id
			COMMENT the identifier of the value
	METHOD getHolder (I)Ljava/util/Optional;
		ARG 1 rawId
	METHOD getHolder (Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;
		ARG 1 key
	METHOD getHolder (Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;
		ARG 1 id
	METHOD getKey getId (Ljava/lang/Object;)Lnet/minecraft/resources/ResourceLocation;
		COMMENT {@return the identifier associated with {@code value}, or {@code null} if it is not registered}
		ARG 1 value
			COMMENT the value
	METHOD getOptional getOptional (Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;
		ARG 1 key
	METHOD getOptional getOptional (Lnet/minecraft/resources/ResourceLocation;)Ljava/util/Optional;
		ARG 1 id
	METHOD getOrThrow getOrThrow (Lnet/minecraft/resources/ResourceKey;)Ljava/lang/Object;
		ARG 1 value
	METHOD getRandom (Lnet/minecraft/util/RandomSource;)Ljava/util/Optional;
		ARG 1 random
	METHOD getResourceKey getKey (Ljava/lang/Object;)Ljava/util/Optional;
		COMMENT {@return the resource key associated with {@code value},
		COMMENT or an {@linkplain Optional#empty() empty optional} if it is not registered}
		ARG 1 value
			COMMENT the value
	METHOD getTag (Lnet/minecraft/tags/TagKey;)Ljava/util/Optional;
		ARG 1 key
	METHOD keySet idSet ()Ljava/util/Set;
	METHOD register register (Lnet/minecraft/core/Registry;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
		ARG 0 registry
		ARG 1 id
		ARG 2 value
	METHOD register register (Lnet/minecraft/core/Registry;Lnet/minecraft/resources/ResourceKey;Ljava/lang/Object;)Ljava/lang/Object;
		ARG 0 registry
		ARG 1 key
		ARG 2 value
	METHOD register register (Lnet/minecraft/core/Registry;Lnet/minecraft/resources/ResourceLocation;Ljava/lang/Object;)Ljava/lang/Object;
		ARG 0 registry
		ARG 1 id
		ARG 2 value
	METHOD registrationInfo (Lnet/minecraft/resources/ResourceKey;)Ljava/util/Optional;
		ARG 1 key
	METHOD registryKeySet keySet ()Ljava/util/Set;
	METHOD registryLifecycle getLifecycle ()Lcom/mojang/serialization/Lifecycle;
	METHOD wrapAsHolder (Ljava/lang/Object;)Lnet/minecraft/core/Holder;
		ARG 1 value
